//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `AppCoordinatorBase`.
    static let appCoordinatorBase = _R.storyboard.appCoordinatorBase()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MainTable`.
    static let mainTable = _R.storyboard.mainTable()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Startup`.
    static let startup = _R.storyboard.startup()
    /// Storyboard `TestCaseList`.
    static let testCaseList = _R.storyboard.testCaseList()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AppCoordinatorBase", bundle: ...)`
    static func appCoordinatorBase(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.appCoordinatorBase)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MainTable", bundle: ...)`
    static func mainTable(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainTable)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Startup", bundle: ...)`
    static func startup(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.startup)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "TestCaseList", bundle: ...)`
    static func testCaseList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.testCaseList)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `NavigatonColor`.
    static let navigatonColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "NavigatonColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "NavigatonColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func navigatonColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.navigatonColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "NavigatonColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func navigatonColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.navigatonColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `logo_Rtoaster_logomark`.
    static let logo_Rtoaster_logomark = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_Rtoaster_logomark")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_Rtoaster_logomark", bundle: ..., traitCollection: ...)`
    static func logo_Rtoaster_logomark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_Rtoaster_logomark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `HeaderCell`.
    static let headerCell = _R.nib._HeaderCell()
    /// Nib `TextViewCell`.
    static let textViewCell = _R.nib._TextViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.headerCell) instead")
    static func headerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.headerCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TextViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.textViewCell) instead")
    static func textViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.textViewCell)
    }
    #endif

    static func headerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HeaderCell? {
      return R.nib.headerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HeaderCell
    }

    static func textViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TextViewCell? {
      return R.nib.textViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `HeaderCell`.
    static let headerCell: Rswift.ReuseIdentifier<HeaderCell> = Rswift.ReuseIdentifier(identifier: "HeaderCell")
    /// Reuse identifier `textViewCell`.
    static let textViewCell: Rswift.ReuseIdentifier<TextViewCell> = Rswift.ReuseIdentifier(identifier: "textViewCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _HeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HeaderCell

      let bundle = R.hostingBundle
      let identifier = "HeaderCell"
      let name = "HeaderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HeaderCell
      }

      fileprivate init() {}
    }

    struct _TextViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TextViewCell

      let bundle = R.hostingBundle
      let identifier = "textViewCell"
      let name = "TextViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TextViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try appCoordinatorBase.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mainTable.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try startup.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try testCaseList.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct appCoordinatorBase: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AppCoordinator

      let appCoordinatorBase = StoryboardViewControllerResource<AppCoordinator>(identifier: "AppCoordinatorBase")
      let bundle = R.hostingBundle
      let name = "AppCoordinatorBase"

      func appCoordinatorBase(_: Void = ()) -> AppCoordinator? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: appCoordinatorBase)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.appCoordinatorBase().appCoordinatorBase() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'appCoordinatorBase' could not be loaded from storyboard 'AppCoordinatorBase' as 'AppCoordinator'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "logo_Rtoaster_logomark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_Rtoaster_logomark' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mainTable: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mainContentNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "mainContentNavigationController")
      let mainTableViewController = StoryboardViewControllerResource<MainTableViewController>(identifier: "MainTableViewController")
      let name = "MainTable"

      func mainContentNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainContentNavigationController)
      }

      func mainTableViewController(_: Void = ()) -> MainTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTableViewController)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "list.dash") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'list.dash' is used in storyboard 'MainTable', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.mainTable().mainTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTableViewController' could not be loaded from storyboard 'MainTable' as 'MainTableViewController'.") }
        if _R.storyboard.mainTable().mainContentNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainContentNavigationController' could not be loaded from storyboard 'MainTable' as 'UIKit.UINavigationController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct startup: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Startup"
      let startupViewController = StoryboardViewControllerResource<StartupViewController>(identifier: "StartupViewController")

      func startupViewController(_: Void = ()) -> StartupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: startupViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.startup().startupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'startupViewController' could not be loaded from storyboard 'Startup' as 'StartupViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct testCaseList: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TestCaseListViewController

      let bundle = R.hostingBundle
      let name = "TestCaseList"
      let testCaseListViewController = StoryboardViewControllerResource<TestCaseListViewController>(identifier: "TestCaseListViewController")

      func testCaseListViewController(_: Void = ()) -> TestCaseListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: testCaseListViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.testCaseList().testCaseListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'testCaseListViewController' could not be loaded from storyboard 'TestCaseList' as 'TestCaseListViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
